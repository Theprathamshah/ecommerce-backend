generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId    Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  phone     String   @unique
  address   String
  password  String
  roleId    Int

  products  Product[]
  tokens    Token[]
  orders    Order[]
  cart      Cart? 

  role      Role     @relation(fields: [roleId], references: [roleId])

  @@map("user")
}

model Role {
  roleId         Int              @id @default(autoincrement())
  roleName       String           @unique
  users          User[]
  rolePermissions RolePermission[]

  @@map("role")
}

model Product {
  productId     Int        @id @default(autoincrement())
  productName   String
  productPrice  Float
  productImage  String
  sellerId      Int
  deletedAt     DateTime?  

  seller        User        @relation(fields: [sellerId], references: [userId])
  orderDetails  OrderDetails[]
  cartItems     CartItem[]

  @@map("product")
}

model Order {
  orderId         Int         @id @default(autoincrement())
  orderDate       DateTime
  status          OrderStatus @default(Processing)
  shippingAddress String
  customerId      Int

  customer       User        @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  orderDetails   OrderDetails[]

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?  

  @@map("order")
}

enum OrderStatus {
  Processing
  Shipped
  Delivered
  Cancelled
}

model Token {
  token  String @id
  userId Int

  user   User   @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("token")
}

model Cart {
  cartId     Int      @id @default(autoincrement())
  customerId Int      @unique
  customer   User     @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  cartItems  CartItem[]

  @@map("cart")
}

model CartItem {
  cartId    Int
  productId Int
  quantity  Int

  cart     Cart    @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  product  Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@id([cartId, productId])
}

model OrderDetails {
  orderId     Int
  productId   Int
  quantity    Int
  price       Float
  productName String

  order   Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@id([orderId, productId])
  @@map("order_details")
}

model Permission {
  permissionId   Int             @id @default(autoincrement())
  permissionName String          @unique

  rolePermissions RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  create       Boolean @default(false)
  update       Boolean @default(false)
  read         Boolean @default(false)
  delete       Boolean @default(false)

  role        Role       @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  permission  Permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permission")
}
